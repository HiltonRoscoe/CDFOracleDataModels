<?xml version="1.0" encoding="UTF-8" ?>
<dr_custom_scripts>
	<scr id="9836D087-881D-2161-19AF-2C6DF49A964A" name="Before Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="B50F3C56-0DC4-6376-8CF9-9CB189DC97DD" name="After Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[/*
variable ddlStatementsList should be used to return the list with DDL statements
that are created by script - as shown below:
ddlStatementsList.add(new java.lang.String(ddl));
other available variables:
- model - relational model instance
- pModel - physical model instance
- table - the table in relational model
- tableProxy - table definition in physical model
*/
var ddl;
var lname;
//journal table name suffix
jnTabSuf = "_JN";
// trigger name suffix
jnTrgSuf = "_JNtrg";
prompt = model.getAppView().getSettings().isIncludePromptInDDL();
useSchema = model.getAppView().getSettings().isIncludeSchemaInDDL();
if(model.getStorageDesign().isOpen()){
	if(useSchema){
	     lname = tableProxy.getLongName();
	}else{
		lname = tableProxy.getName();
	}
}else{
	if(useSchema){
	     lname = table.getLongName();
	}else{
		lname = table.getName();
	}
}
if(prompt){
	ddl= "PROMPT Creating Journal Table for '"+lname+"';\n";
}else{
	ddl = "";
}
ddl = ddl + "CREATE TABLE "+lname+jnTabSuf+"\n"+
" (JN_OPERATION CHAR(3) NOT NULL"+"\n"+
" ,JN_ORACLE_USER VARCHAR2(30) NOT NULL"+"\n"+
" ,JN_DATETIME DATE NOT NULL"+"\n"+
" ,JN_NOTES VARCHAR2(240)"+"\n"+
" ,JN_APPLN VARCHAR2(35)"+"\n"+
" ,JN_SESSION NUMBER(38)"+"\n";
cols = table.getElements();
for(var i=0;i<cols.length;i++){
	col = cols[i];
	ddl = ddl +" ,"+col.getName()+" "+col.getDatatypeString();
	if(col.isMandatory()){
		ddl = ddl + " NOT NULL\n";
	}else{
		ddl = ddl + "\n";
	}
}
ddl = ddl + " );";
ddlStatementsList.add(new java.lang.String(ddl));
if(prompt){
	ddl= "\nPROMPT Creating Journal Trigger for '"+lname+"';\n";
}else{
	ddl = "\n";
}
ddl = ddl +
"CREATE OR REPLACE TRIGGER "+lname+jnTrgSuf +"\n"+
"  AFTER \n" +
"  INSERT OR \n" +
"  UPDATE OR \n" +
"  DELETE ON "+lname+" for each row \n" +
" Declare \n" +
"  rec "+lname+"_JN"+"%ROWTYPE; \n" +
"  blank "+lname+"_JN"+"%ROWTYPE; \n" +
"  BEGIN \n" +
"    rec := blank; \n" +
"    IF INSERTING OR UPDATING THEN \n" ;
for(var i=0;i<cols.length;i++){
	col = cols[i];
	ddl = ddl + "      rec."+col.getName()+" := :NEW."+col.getName()+"; \n";
}
ddl = ddl +
"      rec.JN_DATETIME := SYSDATE; \n" +
"      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); \n" +
"      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); \n" +
"      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); \n" +
"      IF INSERTING THEN \n" +
"        rec.JN_OPERATION := 'INS'; \n" +
"      ELSIF UPDATING THEN \n" +
"        rec.JN_OPERATION := 'UPD'; \n" +
"      END IF; \n" +
"    ELSIF DELETING THEN \n" ;
for(var i=0;i<cols.length;i++){
	col = cols[i];
	ddl = ddl + "      rec."+col.getName()+" := :OLD."+col.getName()+"; \n";
}
ddl = ddl +
"      rec.JN_DATETIME := SYSDATE; \n" +
"      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); \n" +
"      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); \n" +
"      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); \n" +
"      rec.JN_OPERATION := 'DEL'; \n" +
"    END IF; \n" +
"    INSERT into "+lname+"_JN"+" VALUES rec; \n" +
"  END; \n" +
"  /"
ddlStatementsList.add(new java.lang.String(ddl));]]>
		</script>
	</scr>
	<scr id="DC383793-5C2E-F62A-5241-35B8ACE86134" name="End Of Script" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="1C0CDD35-A0D6-47E5-C702-7FB537C8A8C0" name="Instead Of Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="0DC38187-8245-8904-7E00-D4B6DF394899" name="Before Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="83D0D285-DF95-0BE7-EF4F-AC3F2D9CDE94" name="After Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[ddl = "-- After Create script example for table " +table.getLongName();
ddlStatementsList.add(new java.lang.String(ddl));]]>
		</script>
	</scr>
	<scr id="6FDC20F3-D5B1-9711-C93F-745217AC8664" name="End Of Script" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="27EEAD3F-3367-9D6F-8E02-D44189C855A1" name="Instead Of Create" object="null" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="ddl_transformation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="D36CE536-D575-BE5C-625F-23DE23913C6B" name="Complex rule - check comments demo" object="Table" engine="Oracle Nashorn" type="Warning" var="table" library="my first library" method="checkcomments" purpose="validation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="D72E63EC-9DA2-3537-F8C9-AE8ACEDC73D2" name="Length of Not Null Constraint name" object="Column" engine="Oracle Nashorn" type="Error" var="column" library="my first library" method="NotNullConstr_Name_Length" purpose="validation" >
		<script>
			<![CDATA[]]>
		</script>
	</scr>
	<scr id="3F2B77AE-F97F-EF6D-4D6D-C9FE4CC78999" name="Optional FK with mandatory columns" object="Index/Constraint" engine="Oracle Nashorn" type="Warning" var="index" library="" method="" purpose="validation" >
		<script>
			<![CDATA[var index;
// define function - function parameter doesn't need to be named index
function checkFKColumns(index){
  //check it's foreign key index, otherwise FK is null
 if(index.isFK()){
 	if(!index.getFKAssociation().isMandatory()){
	 cols = index.getElements();
	 for(var i=0;i<cols.length;i++){
		if(cols[i].isMandatory()){
			return false;
		}
	 }
 	}
 }
 return true;
}
// invoke the function
checkFKColumns(index);]]>
		</script>
	</scr>
	<scr id="0BAA564F-AB5F-D776-2E4F-31FDB3047F69" name="Tables to lower case - Rhino" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 name = table.getName().toLowerCase();
 table.setName(name);
 columns = table.getElements();
 size = table.getElementsCollection().size();
 for (var i = 0; i < size; i++) {
	column = columns[i];
	cname = column.getName().toLowerCase();
	column.setName(cname);
 }
 table.setDirty(true);
 keys = table.getKeys();
 for (var i = 0; i < keys.length; i++) {
  key = keys[i];
    if(!key.isFK()){
     kname = key.getName().toLowerCase();
     key.setName(kname);
   }else{
     kname = key.getFKAssociation().getName().toLowerCase();
     key.getFKAssociation().setName(kname);
     key.getFKAssociation().setDirty(true);
   }
 }
}]]>
		</script>
	</scr>
	<scr id="B673F271-4836-DD48-15AC-487DDECCAF49" name="Tables to upper case - JRuby" object="relational" engine="JSR 223 JRuby Engine" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables =$model.getTableSet().toArray()
for t in 0..tables.length-1
 table = tables[t]
 name = table.getName().upcase
 table.setName(name)
 columns = table.getElements()
 size = table.getElementsCollection().size()-1
 for i in 0..size
	column = columns[i]
	cname = column.getName().upcase
	column.setName(cname)
 end
 keys = table.getKeys()
 for i in 0..keys.length-1
  key = keys[i]
  kname = key.getName().upcase
  key.setName(kname)
 end
end]]>
		</script>
	</scr>
	<scr id="3E7C4F9E-9FCB-56C7-086F-F976F9A66384" name="Tables to upper case - JRuby - library usage" object="relational" engine="JSR 223 JRuby Engine" type="" var="model" library="Jruby lib" method="tables_up" purpose="transformation" >
		<script>
			<![CDATA[def tables_up(model)
tables = model.getTableSet().toArray()
for t in 0..tables.length-1
 table = tables[t]
 name = table.getName().upcase
 table.setName(name)
 columns = table.getElements()
 size = table.getElementsCollection().size()-1
 for i in 0..size
	column = columns[i]
	cname = column.getName().upcase
	column.setName(cname)
 end
 keys = table.getKeys()
 for i in 0..keys.length-1
  key = keys[i]
  kname = key.getName().upcase
  key.setName(kname)
 end
end
return true
end]]>
		</script>
	</scr>
	<scr id="E60A5A28-BB9B-3787-10E7-259DF900B9E6" name="Table abbreviation to column" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 abbr = table.getAbbreviation()+"_";
 if(!"_".equals(abbr)){
     columns = table.getElements();
     for (var i = 0; i < columns.length; i++) {
        column = columns[i];
        cname = column.getName();
        if(!cname.startsWith(abbr)){
         column.setName(abbr+cname);
        }
     }
 }
}]]>
		</script>
	</scr>
	<scr id="9BE4E26C-36D8-A92C-ADEA-F183327DC239" name="Remove Table abbr from column" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 abbr = table.getAbbreviation()+"_";
 count = table.getAbbreviation().length()+1;
 if(!"_".equals(abbr)){
     columns = table.getElements();
     for (var i = 0; i < columns.length; i++) {
        column = columns[i];
        cname = column.getName();
        if(cname.startsWith(abbr)){
         column.setName(cname.substring(count));
         table.setDirty(true);
        }
     }
 }
}]]>
		</script>
	</scr>
	<scr id="5A8A151A-13FD-4B0A-E233-E3C5126BA02C" name="Tables to upper case - Rhino" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 name = table.getName().toUpperCase();
 table.setName(name);
 columns = table.getElements();
 size = table.getElementsCollection().size();
 for (var i = 0; i < size; i++) {
	column = columns[i];
	cname = column.getName().toUpperCase();
	column.setName(cname);
 }
 table.setDirty(true);
 keys = table.getKeys();
 for (var i = 0; i < keys.length; i++) {
  key = keys[i];
    if(!key.isFK()){
     kname = key.getName().toUpperCase();
     key.setName(kname);
   }else{
     kname = key.getFKAssociation().getName().toUpperCase();
     key.getFKAssociation().setName(kname);
     key.getFKAssociation().setDirty(true);
   }
 }
}]]>
		</script>
	</scr>
	<scr id="0528C35C-F29B-E7BB-57AC-37BA2780A98D" name="Table template - uses column name" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[// columns are found by column name
// allowing reuse of already existing columns
// dynamic property ctemplateID is set afterwards - will keep connection to template
// column even if the name of column is changed
var t_name = "table_template";
var p_name = "ctemplateID";
template = model.getTableSet().getByName(t_name);
if(template!=null){
    tcolumns = template.getElements();
    tables = model.getTableSet().toArray();
    for (var t = 0; t<tables.length;t++){
     table = tables[t];
    // compare name ignoring the case
     if(!table.getName().equalsIgnoreCase(t_name)){
         for (var i = 0; i < tcolumns.length; i++) {
            column = tcolumns[i];
            col = table.getElementByName(column.getName());
            if(col==null){
             col = table.getColumnByProperty(p_name,column.getObjectID());
            }
            if(col==null){
             col = table.createColumn();
            }
            column.copy(col);
            //set property after copy otherwise it'll be cleared by copy
            col.setProperty(p_name,column.getObjectID());
            table.setDirty(true);
         }
     }
    }
}]]>
		</script>
	</scr>
	<scr id="6279C414-90DD-A52B-4CEB-8D49AB31DC10" name="Copy Comments to Comments in RDBMS" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[max_length = 4000;
function copyComments(object){
 if(object.getCommentInRDBMS().equals("")){
   if(!object.getComment().equals("")){
     if(object.getComment().length()>max_length){
       object.setCommentInRDBMS(object.getComment().substring(0, max_length));
     }else{
       object.setCommentInRDBMS(object.getComment());
     }
     object.setDirty(true);
   }
 }
}

tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t]
 copyComments(table);
 columns = table.getElements();
 size = table.getElementsCollection().size();
 for (var i = 0; i < columns.length; i++) {
	column = columns[i];
	copyComments(column);
 }
 keys = table.getKeys();
 for (var i = 0; i < keys.length; i++) {
   key = keys[i];
   if(!key.isFK()){
     copyComments(key);
   }else{
     copyComments(key.getFKAssociation());
   }
 }
}]]>
		</script>
	</scr>
	<scr id="7C4EDFC0-26EA-859C-DBD9-AC9345DEAF98" name="Create index on FK" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[function getIndex(tab,cols){
 keys = tab.getKeys();
 for (var i = 0; i < keys.length; i++) {
  index = keys[i];
  if(!(index.isPK() || index.isUnique()) && !index.isFK() && index.isIndexForColumns(cols)){
     return index
   }
 }
 return null;
}

tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t];
 indexes = table.getKeys();
 for (var i = 0; i < indexes.length; i++) {
    index = indexes[i];
    if(index.isFK()){
     columns = index.getColumns();
     if(columns.length>0){
       newIndex = getIndex(table,columns);
       if(newIndex==null){
         newIndex = table.createIndex()
         table.setDirty(true);
         for (var k = 0; k < columns.length; k++){
           newIndex.add(columns[k]);
         }
       }
     }
   }
 }
}]]>
		</script>
	</scr>
	<scr id="1726EC74-A64B-0C0F-83DB-2A4BEF0D3DCA" name="Columns order" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[// sorts table columns as asked here https://forums.oracle.com/forums/thread.jspa?threadID=2508315&tstart=0
// "...first the pks columns, after them fk columns and after the not null columns"
function addPKcolumns(list,table){
	pk = table.getPK();
	if(pk!=null){
		pcols = pk.getColumns();
		for(var i = 0;i<pcols.length;i++){
			col = pcols[i];
			//in fact don't need this check, because PK columns are processed first
			if(!list.contains(col)){
				list.add(col);
			}
		}
	}
}

function addFKcolumns(list,fkeys){
	for(var k=0;k<fkeys.length;k++){
		fcols = fkeys[k].getColumns();
		for(var i = 0;i<fcols.length;i++){
		  col = fcols[i];
		  if(!list.contains(col)){
			list.add(col);
		  }
		}
	}
}
//adds mandatory or oprional columns to list depending on mand parameter
function addMandatoryOptColumns(list,cols, mand){
	for(var i = 0;i<cols.length;i++){
		col = cols[i];
		if(col.isMandatory() == mand && !list.contains(col)){
			list.add(col);
		}
	}
}

tables = model.getTableSet().toArray();
list = new java.util.ArrayList();
for (var t = 0; t<tables.length;t++){
	list.clear();
	table = tables[t];
	cols = table.getElements();
	// add PK columns to list
	addPKcolumns(list,table);
	// add FK columns to list
	addFKcolumns(list,table.getFKAssociations());
	//add mandatory columns
	addMandatoryOptColumns(list,cols,true);
	//add optional columns
	addMandatoryOptColumns(list,cols,false);
	//use list to reorder columns
	ord_cols = list.toArray();
	for(var n = 0;n<ord_cols.length;n++){
		table.moveToIndex(ord_cols[n],n);
	}
	//prevent reordering from enginnering, can be changed with UI
	table.setAllowColumnReorder(false);
	table.setDirty(true);
}]]>
		</script>
	</scr>
	<scr id="F54B1A9C-F951-EB88-E905-5599533569B1" name="Create subview from tables in serch result " object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[objs = model.getLastSearchResult().toArray();
var dp;
var sv;
//create subview and add tables to it
for(var i = 0;i<objs.length;i++){
	obj = objs[i];
	// use "Entity" for entities and logical model
	if(obj.getObjectTypeName().equals("Table")){
		if(dp==null){
			dp = obj.getDesignPart();
			sv = dp.createDesignPartSubView();
			// uncomment next line if want to set name
		     //sv.setName("Name");
		     sv.getPlaceHolder().setVisible(true);
		}
		sv.addViewFor(obj);
	}
}
if(dp!=null){
 //add foreign keys if you want to
 for(var i = 0;i<objs.length;i++){
	obj = objs[i];
	// use "Entity" for entities and logical model
	if(obj.getObjectTypeName().equals("Table")){
		tv = obj.getFirstViewForDPV(sv);
		if(tv!=null){
			//for entities and logical model use 
			//tv.addTVRelations(); 
			tv.addTVFKRelations();
		}
	}
 }
 //add Arcs if you want to
 for(var i = 0;i<objs.length;i++){
	obj = objs[i];
	if(obj.getObjectTypeName().equals("Table")){
		tv = obj.getFirstViewForDPV(sv);
		if(tv!=null){
			tv.addArcs();
		}
	}
 }
 //arrange diagram
 sv.rearrangeNewDiagram();
}]]>
		</script>
	</scr>
	<scr id="EF64BEDD-B648-C41B-60C7-B9EA938E0A3C" name="Remove template columns and related attributes" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[/* removes the columns created with "Table template..." script, also removes related attributes
*  from logical model
*  more details here http://www.thatjeffsmith.com/archive/2015/03/adding-common-columns-to-tables-via-templates-and-transformation-scripts/
*/
var t_name = "table_template";
var p_name = "ctemplateID";
template = model.getTableSet().getByName(t_name);
if(template!=null){
    tcolumns = template.getElements();
    tables = model.getTableSet().toArray();
    for (var t = 0; t<tables.length;t++){
     table = tables[t];
    // compare name ignoring the case
     if(!table.getName().equalsIgnoreCase(t_name)){
         for (var i = 0; i < tcolumns.length; i++) {
            column = tcolumns[i];
            col = table.getColumnByProperty(p_name,column.getObjectID());
            if(col!=null){
            	attr = col.getEngAttribute();
            	if(attr!=null){
            		ent = attr.getEntity();
            		attr.remove();
            		if(ent!=null){
            			ent.setDirty(true);
            		}
            	}
             col.remove();
             table.setDirty(true);
            }
         }
     }
    }
}]]>
		</script>
	</scr>
	<scr id="059366D9-5C12-0BF5-1B90-BD8B6497FB4D" name="Tr_13" object="logical" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[design = model.getDesign();

// create enumerations
{
  domain = design.createDomain();
  domain.name = "BallotMeasureType";
  ce = domain.createConstraintEnumeration();
      ce.add("ballot-measure","");
      ce.add("initiative","");
      ce.add("other","");
      ce.add("recall","");
      ce.add("referendum","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CandidatePostElectionStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("advanced-to-runoff","");
      ce.add("defeated","");
      ce.add("projected-winner","");
      ce.add("winner","");
      ce.add("withdrawn","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CandidatePreElectionStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("filed","");
      ce.add("qualified","");
      ce.add("withdrawn","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CountItemStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("completed","");
      ce.add("in-process","");
      ce.add("not-processed","");
      ce.add("unknown","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CountItemType";
  ce = domain.createConstraintEnumeration();
      ce.add("absentee","");
      ce.add("absentee-fwab","");
      ce.add("absentee-in-person","");
      ce.add("absentee-mail","");
      ce.add("early","");
      ce.add("election-day","");
      ce.add("other","");
      ce.add("provisional","");
      ce.add("seats","");
      ce.add("total","");
      ce.add("uocava","");
      ce.add("write-in","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "DayType";
  ce = domain.createConstraintEnumeration();
      ce.add("all","");
      ce.add("friday","");
      ce.add("monday","");
      ce.add("saturday","");
      ce.add("sunday","");
      ce.add("thursday","");
      ce.add("tuesday","");
      ce.add("wednesday","");
      ce.add("weekday","");
      ce.add("weekend","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "DeviceType";
  ce = domain.createConstraintEnumeration();
      ce.add("bmd","");
      ce.add("dre","");
      ce.add("manual-count","");
      ce.add("opscan-central","");
      ce.add("opscan-precinct","");
      ce.add("other","");
      ce.add("unknown","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ElectionType";
  ce = domain.createConstraintEnumeration();
      ce.add("general","");
      ce.add("other","");
      ce.add("partisan-primary-closed","");
      ce.add("partisan-primary-open","");
      ce.add("primary","");
      ce.add("runoff","");
      ce.add("special","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "GeoSpatialFormat";
  ce = domain.createConstraintEnumeration();
      ce.add("geo-json","");
      ce.add("gml","");
      ce.add("kml","");
      ce.add("shp","");
      ce.add("wkt","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "IdentifierType";
  ce = domain.createConstraintEnumeration();
      ce.add("fips","");
      ce.add("local-level","");
      ce.add("national-level","");
      ce.add("ocd-id","");
      ce.add("other","");
      ce.add("state-level","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "OfficeTermType";
  ce = domain.createConstraintEnumeration();
      ce.add("full-term","");
      ce.add("unexpired-term","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ReportDetailLevel";
  ce = domain.createConstraintEnumeration();
      ce.add("precinct-level","");
      ce.add("summary-contest","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ReportingUnitType";
  ce = domain.createConstraintEnumeration();
      ce.add("ballot-batch","");
      ce.add("ballot-style-area","");
      ce.add("borough","");
      ce.add("city","");
      ce.add("city-council","");
      ce.add("combined-precinct","");
      ce.add("congressional","");
      ce.add("country","");
      ce.add("county","");
      ce.add("county-council","");
      ce.add("drop-box","");
      ce.add("judicial","");
      ce.add("municipality","");
      ce.add("other","");
      ce.add("polling-place","");
      ce.add("precinct","");
      ce.add("school","");
      ce.add("special","");
      ce.add("split-precinct","");
      ce.add("state","");
      ce.add("state-house","");
      ce.add("state-senate","");
      ce.add("town","");
      ce.add("township","");
      ce.add("utility","");
      ce.add("village","");
      ce.add("vote-center","");
      ce.add("ward","");
      ce.add("water","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ResultsStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("certified","");
      ce.add("correction","");
      ce.add("pre-election","");
      ce.add("recount","");
      ce.add("unofficial-complete","");
      ce.add("unofficial-partial","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "VoteVariation";
  ce = domain.createConstraintEnumeration();
      ce.add("approval","");
      ce.add("borda","");
      ce.add("cumulative","");
      ce.add("majority","");
      ce.add("n-of-m","");
      ce.add("other","");
      ce.add("plurality","");
      ce.add("proportional","");
      ce.add("range","");
      ce.add("rcv","");
      ce.add("super-majority","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
// create entities
entity = model.createEntity();
entity.setName("AnnotatedString");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Annotation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Content")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("AnnotatedUri");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Annotation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Content")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("BallotCounts");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("BallotsCast")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotsOutstanding")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotsRejected")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("BallotMeasureContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("ConStatement")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("EffectOfAbstain")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FullText")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("PassageThreshold")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("ProStatement")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SummaryText")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("BallotMeasureType");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("BallotMeasureSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Selection")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("BallotStyle");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("Candidate");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("BallotName")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("CampaignSlogan")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FileDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsIncumbent")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsTopTicket")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("PostElectionStatus")
    domains = design.getDomainSet();
  domain = domains.getByName("CandidatePostElectionStatus");
  attribute.setDomain(domain);
    attribute = entity.createAttribute();

attribute.setName("PreElectionStatus")
    domains = design.getDomainSet();
  domain = domains.getByName("CandidatePreElectionStatus");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("CandidateContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("NumberElected")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("NumberRunoff")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VotesAllowed")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("CandidateSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("IsWriteIn")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Coalition");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("ContactInformation");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Directions")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Contest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Abbreviation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotSubTitle")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotTitle")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("HasRotation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("OtherVoteVariation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SequenceOrder")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SubUnitsReported")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("TotalSubUnits")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VoteVariation")
    domains = design.getDomainSet();
  domain = domains.getByName("VoteVariation");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("ContestSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("SequenceOrder")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("CountStatus");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Status")
    domains = design.getDomainSet();
  domain = domains.getByName("CountItemStatus");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("CountItemType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Counts");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("IsSuppressedForPrivacy")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Round")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("CountItemType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("DeviceClass");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Manufacturer")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Model")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("DeviceType");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("Election");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("EndDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("StartDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("ElectionType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("ElectionAdministration");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("ElectionReport");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Format")
    domains = design.getDomainSet();
  domain = domains.getByName("ReportDetailLevel");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("GeneratedDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Timestamp");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("IsTest")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Issuer")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("IssuerAbbreviation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Notes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SequenceEnd")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("SequenceStart")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Status")
    domains = design.getDomainSet();
  domain = domains.getByName("ResultsStatus");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("TestType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VendorApplicationId")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("ExternalIdentifier");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("IdentifierType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Value")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("GpUnit");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Header");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Hours");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Day")
    domains = design.getDomainSet();
  domain = domains.getByName("DayType");
  attribute.setDomain(domain);
    attribute = entity.createAttribute();

attribute.setName("EndTime")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("StartTime")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("LatLng");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Latitude")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Longitude")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Source")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Office");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Description")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FilingDeadline")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsPartisan")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("OfficeGroup");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("OrderedContent");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
entity = model.createEntity();
entity.setName("OrderedContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("OrderedHeader");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("OtherCounts");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Overvotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Undervotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("WriteIns")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Party");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Abbreviation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Color")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsRecognizedParty")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Slogan")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("PartyContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("PartyRegistration");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Count")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("PartySelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("Person");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("DateOfBirth")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FirstName")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FullName")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Gender")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("LastName")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Nickname")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Prefix")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Profession")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Suffix")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Title")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("ReportingDevice");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("SerialNumber")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("ReportingUnit");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("IsDistricted")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsMailOnly")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Number")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SubUnitsReported")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("TotalSubUnits")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("ReportingUnitType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("VotersParticipated")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VotersRegistered")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("RetentionContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("Schedule");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("EndDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsOnlyByAppointment")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsOrByAppointment")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsSubjectToChange")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("StartDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("SpatialDimension");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("SpatialExtent");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Coordinates")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Format")
    domains = design.getDomainSet();
  domain = domains.getByName("GeoSpatialFormat");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Term");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("EndDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("StartDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("OfficeTermType");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("VoteCounts");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Count")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  // DO SECOND PASS OF ENTITIES
              source = model.getEntitySet().getByName("BallotCounts");
    target = model.getEntitySet().getByName("Counts");
  source.setHierarchicalParent(target);
        source = model.getEntitySet().getByName("BallotMeasureContest");
    target = model.getEntitySet().getByName("Contest");
  source.setHierarchicalParent(target);
    sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("BallotMeasureContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("InfoUri");
      relation.setName("BallotMeasureContest_AnnotatedUri");
      relation.setProperty("fkRole", "BallotMeasureContest");
        source = model.getEntitySet().getByName("BallotMeasureSelection");
    target = model.getEntitySet().getByName("ContestSelection");
  source.setHierarchicalParent(target);
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("BallotMeasureSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("BallotMeasureSelection_ExternalIdentifier");
      relation.setProperty("fkRole", "BallotMeasureSelection");
        sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("BallotStyle_ExternalIdentifier");
      relation.setProperty("fkRole", "BallotStyle");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("BallotStyle_GpUnit");
      relation.setProperty("fkRole", "BallotStyle");
    sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ImageUri");
      relation.setName("BallotStyle_AnnotatedUri");
      relation.setProperty("fkRole", "BallotStyle");
    sourceName = "OrderedContent";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("BallotStyle_OrderedContent");
      relation.setProperty("fkRole", "BallotStyle");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("BallotStyle_Party");
      relation.setProperty("fkRole", "BallotStyle");
        sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Candidate_ContactInformation");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ContactInformation");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Candidate_ExternalIdentifier");
      relation.setProperty("fkRole", "Candidate");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Candidate_Party");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "Party");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Candidate_Person");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "Person");
        source = model.getEntitySet().getByName("CandidateContest");
    target = model.getEntitySet().getByName("Contest");
  source.setHierarchicalParent(target);
    sourceName = "Office";
 
    target = model.getEntitySet().getByName("CandidateContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("CandidateContest_Office");
      relation.setProperty("fkRole", "CandidateContest");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("CandidateContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("PrimaryParty");
      relation.setName("CandidateContest_Party");
      relation.setProperty("fkRole", "CandidateContest");
        source = model.getEntitySet().getByName("CandidateSelection");
    target = model.getEntitySet().getByName("ContestSelection");
  source.setHierarchicalParent(target);
    sourceName = "Candidate";
 
    target = model.getEntitySet().getByName("CandidateSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("CandidateSelection_Candidate");
      relation.setProperty("fkRole", "CandidateSelection");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("CandidateSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("EndorsementParty");
      relation.setName("CandidateSelection_Party");
      relation.setProperty("fkRole", "CandidateSelection");
        source = model.getEntitySet().getByName("Coalition");
    target = model.getEntitySet().getByName("Party");
  source.setHierarchicalParent(target);
    sourceName = "Contest";
 
    target = model.getEntitySet().getByName("Coalition");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Coalition_Contest");
      relation.setProperty("fkRole", "Coalition");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("Coalition");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Coalition_Party");
      relation.setProperty("fkRole", "Coalition");
        entity = model.createEntity();
sourceName = "ContactInformationAddressLine";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("AddressLine")
// DETERMINE DATA TYPE
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
   
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ContactInformation_String");
      relation.setProperty("fkRole", "ContactInformation");
    sourceName = "AnnotatedString";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Email");
      relation.setName("ContactInformation_AnnotatedString");
      relation.setProperty("fkRole", "ContactInformation");
    sourceName = "AnnotatedString";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Fax");
      relation.setName("ContactInformation_AnnotatedString");
      relation.setProperty("fkRole", "ContactInformation");
    sourceName = "LatLng";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ContactInformation_LatLng");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "LatLng");
    sourceName = "AnnotatedString";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Phone");
      relation.setName("ContactInformation_AnnotatedString");
      relation.setProperty("fkRole", "ContactInformation");
    sourceName = "Schedule";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ContactInformation_Schedule");
      relation.setProperty("fkRole", "ContactInformation");
    sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Uri");
      relation.setName("ContactInformation_AnnotatedUri");
      relation.setProperty("fkRole", "ContactInformation");
        sourceName = "ContestSelection";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Contest_ContestSelection");
      relation.setProperty("fkRole", "Contest");
    sourceName = "CountStatus";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Contest_CountStatus");
      relation.setProperty("fkRole", "Contest");
    sourceName = "ReportingUnit";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ElectionDistrict");
      relation.setName("Contest_ReportingUnit");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ElectionDistrict");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Contest_ExternalIdentifier");
      relation.setProperty("fkRole", "Contest");
    sourceName = "OtherCounts";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Contest_OtherCounts");
      relation.setProperty("fkRole", "Contest");
        sourceName = "VoteCounts";
 
    target = model.getEntitySet().getByName("ContestSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ContestSelection_VoteCounts");
      relation.setProperty("fkRole", "ContestSelection");
            sourceName = "DeviceClass";
 
    target = model.getEntitySet().getByName("Counts");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Counts_DeviceClass");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "DeviceClass");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("Counts");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("Counts_GpUnit");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "GpUnit");
            sourceName = "BallotCounts";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_BallotCounts");
      relation.setProperty("fkRole", "Election");
    sourceName = "BallotStyle";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_BallotStyle");
      relation.setProperty("fkRole", "Election");
    sourceName = "Candidate";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_Candidate");
      relation.setProperty("fkRole", "Election");
    sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_ContactInformation");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ContactInformation");
    sourceName = "Contest";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_Contest");
      relation.setProperty("fkRole", "Election");
    sourceName = "CountStatus";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Election_CountStatus");
      relation.setProperty("fkRole", "Election");
    sourceName = "ReportingUnit";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ElectionScope");
      relation.setName("Election_ReportingUnit");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ElectionScope");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Election_ExternalIdentifier");
      relation.setProperty("fkRole", "Election");
        sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("ElectionAdministration");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionAdministration_ContactInformation");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ContactInformation");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("ElectionAdministration");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ElectionOfficialPerson");
      relation.setName("ElectionAdministration_Person");
      relation.setProperty("fkRole", "ElectionAdministration");
        sourceName = "Election";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Election");
      relation.setProperty("fkRole", "ElectionReport");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("ElectionReport_ExternalIdentifier");
      relation.setProperty("fkRole", "ElectionReport");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_GpUnit");
      relation.setProperty("fkRole", "ElectionReport");
    sourceName = "Header";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Header");
      relation.setProperty("fkRole", "ElectionReport");
    sourceName = "Office";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Office");
      relation.setProperty("fkRole", "ElectionReport");
    sourceName = "OfficeGroup";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_OfficeGroup");
      relation.setProperty("fkRole", "ElectionReport");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Party");
      relation.setProperty("fkRole", "ElectionReport");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Person");
      relation.setProperty("fkRole", "ElectionReport");
            sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("GpUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ComposingGpUnit");
      relation.setName("GpUnit_GpUnit");
      relation.setProperty("fkRole", "GpUnit");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("GpUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("GpUnit_ExternalIdentifier");
      relation.setProperty("fkRole", "GpUnit");
        sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Header");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Header_ExternalIdentifier");
      relation.setProperty("fkRole", "Header");
                sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Office_ContactInformation");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ContactInformation");
    sourceName = "ReportingUnit";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ElectionDistrict");
      relation.setName("Office_ReportingUnit");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ElectionDistrict");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Office_ExternalIdentifier");
      relation.setProperty("fkRole", "Office");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("OfficeHolderPerson");
      relation.setName("Office_Person");
      relation.setProperty("fkRole", "Office");
    sourceName = "Term";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Office_Term");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "Term");
        sourceName = "Office";
 
    target = model.getEntitySet().getByName("OfficeGroup");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("OfficeGroup_Office");
      relation.setProperty("fkRole", "OfficeGroup");
    sourceName = "OfficeGroup";
 
    target = model.getEntitySet().getByName("OfficeGroup");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
      relation.setNameOnTarget("SubOfficeGroup");
      relation.setName("OfficeGroup_OfficeGroup");
      relation.setProperty("fkRole", "OfficeGroup");
            source = model.getEntitySet().getByName("OrderedContest");
    target = model.getEntitySet().getByName("OrderedContent");
  source.setHierarchicalParent(target);
    sourceName = "Contest";
 
    target = model.getEntitySet().getByName("OrderedContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("OrderedContest_Contest");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "Contest");
    sourceName = "ContestSelection";
 
    target = model.getEntitySet().getByName("OrderedContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("OrderedContestSelection");
      relation.setName("OrderedContest_ContestSelection");
      relation.setProperty("fkRole", "OrderedContest");
        source = model.getEntitySet().getByName("OrderedHeader");
    target = model.getEntitySet().getByName("OrderedContent");
  source.setHierarchicalParent(target);
    sourceName = "Header";
 
    target = model.getEntitySet().getByName("OrderedHeader");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("OrderedHeader_Header");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "Header");
    sourceName = "OrderedContent";
 
    target = model.getEntitySet().getByName("OrderedHeader");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("OrderedHeader_OrderedContent");
      relation.setProperty("fkRole", "OrderedHeader");
        sourceName = "DeviceClass";
 
    target = model.getEntitySet().getByName("OtherCounts");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("OtherCounts_DeviceClass");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "DeviceClass");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("OtherCounts");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("OtherCounts_GpUnit");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "GpUnit");
        sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Party_ContactInformation");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ContactInformation");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Party_ExternalIdentifier");
      relation.setProperty("fkRole", "Party");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("LeaderPerson");
      relation.setName("Party_Person");
      relation.setProperty("fkRole", "Party");
    sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("LogoUri");
      relation.setName("Party_AnnotatedUri");
      relation.setProperty("fkRole", "Party");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("PartyScopeGpUnit");
      relation.setName("Party_GpUnit");
      relation.setProperty("fkRole", "Party");
        source = model.getEntitySet().getByName("PartyContest");
    target = model.getEntitySet().getByName("Contest");
  source.setHierarchicalParent(target);
        sourceName = "Party";
 
    target = model.getEntitySet().getByName("PartyRegistration");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("PartyRegistration_Party");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "Party");
        source = model.getEntitySet().getByName("PartySelection");
    target = model.getEntitySet().getByName("ContestSelection");
  source.setHierarchicalParent(target);
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("PartySelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("PartySelection_Party");
      relation.setProperty("fkRole", "PartySelection");
        sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Person");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Person_ContactInformation");
      relation.setProperty("fkRole", "Person");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Person");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Person_ExternalIdentifier");
      relation.setProperty("fkRole", "Person");
    entity = model.createEntity();
sourceName = "PersonMiddleName";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("MiddleName")
// DETERMINE DATA TYPE
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
   
    target = model.getEntitySet().getByName("Person");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Person_String");
      relation.setProperty("fkRole", "Person");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("Person");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Person_Party");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "Party");
        source = model.getEntitySet().getByName("ReportingDevice");
    target = model.getEntitySet().getByName("GpUnit");
  source.setHierarchicalParent(target);
    sourceName = "DeviceClass";
 
    target = model.getEntitySet().getByName("ReportingDevice");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("ReportingDevice_DeviceClass");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "DeviceClass");
        source = model.getEntitySet().getByName("ReportingUnit");
    target = model.getEntitySet().getByName("GpUnit");
  source.setHierarchicalParent(target);
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Authority");
      relation.setName("ReportingUnit_Person");
      relation.setProperty("fkRole", "ReportingUnit");
    sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ReportingUnit_ContactInformation");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ContactInformation");
    sourceName = "CountStatus";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("ReportingUnit_CountStatus");
      relation.setProperty("fkRole", "ReportingUnit");
    sourceName = "ElectionAdministration";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ReportingUnit_ElectionAdministration");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "ElectionAdministration");
    sourceName = "PartyRegistration";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ReportingUnit_PartyRegistration");
      relation.setProperty("fkRole", "ReportingUnit");
    sourceName = "SpatialDimension";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ReportingUnit_SpatialDimension");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "SpatialDimension");
        source = model.getEntitySet().getByName("RetentionContest");
    target = model.getEntitySet().getByName("BallotMeasureContest");
  source.setHierarchicalParent(target);
    sourceName = "Candidate";
 
    target = model.getEntitySet().getByName("RetentionContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("RetentionContest_Candidate");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "Candidate");
    sourceName = "Office";
 
    target = model.getEntitySet().getByName("RetentionContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("RetentionContest_Office");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "Office");
        sourceName = "Hours";
 
    target = model.getEntitySet().getByName("Schedule");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Schedule_Hours");
      relation.setProperty("fkRole", "Schedule");
        sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("SpatialDimension");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("MapUri");
      relation.setName("SpatialDimension_AnnotatedUri");
      relation.setProperty("fkRole", "SpatialDimension");
    sourceName = "SpatialExtent";
 
    target = model.getEntitySet().getByName("SpatialDimension");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("SpatialDimension_SpatialExtent");
      // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "SpatialExtent");
                source = model.getEntitySet().getByName("VoteCounts");
    target = model.getEntitySet().getByName("Counts");
  source.setHierarchicalParent(target);]]>
		</script>
	</scr>
	<scr id="3EA2EDBE-29B9-909E-6B59-2F32981D6C95" name="Copy fkRole into Relational Model" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t < tables.length; t++) {
    table = tables[t];
    // get the entity for the table
    // if it doesn't exist, then we know the table was generated 
    // i.e. a resolution of a many-to-many relationship
    entity = table.getEngEntity();    
    fkAsses = table.getFKAssociations();
    for (var u = 0; u < fkAsses.length; u++) {
        assoc = fkAsses[u]; 
        relationship = assoc.getEngRelation();
        if (relationship != null && entity) {
            //iterate over all properties if you want to copy all of them
            // or get specific property with entity.getProperty(pname)
            it = relationship.getPropertyNames();
            while (it.hasNext()) {
                pname = it.next();
                property = relationship.getProperty(pname);
                assoc.setProperty(pname, property);
                assoc.setDirty(true);
            }
            //if(!relationship.getProperty("fkRole")){
            //	assoc.setProperty("fkRole", assoc.getReferredTableLongName());
            //}
        } else {
        		// not from the logical model, thus we must pull the names from
        		// the other side. ODM will by default pull the fkRole from the many-to-many
        		// relationship will cause a side to get lost :(
        		//assoc.setProperty("fkRole", "");        
			//assoc.setProperty("fkRole", assoc.getReferredTableLongName());        
        }
    }
}]]>
		</script>
	</scr>
	<scr id="CB98C178-4EC8-F9BB-8FAD-55147C99BE5A" name="ERR" object="logical" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[design = model.getDesign();

// create enumerations
{
  domain = design.createDomain();
  domain.name = "BallotMeasureType";
  ce = domain.createConstraintEnumeration();
      ce.add("ballot-measure","");
      ce.add("initiative","");
      ce.add("other","");
      ce.add("recall","");
      ce.add("referendum","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CandidatePostElectionStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("advanced-to-runoff","");
      ce.add("defeated","");
      ce.add("projected-winner","");
      ce.add("winner","");
      ce.add("withdrawn","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CandidatePreElectionStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("filed","");
      ce.add("qualified","");
      ce.add("withdrawn","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CountItemStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("completed","");
      ce.add("in-process","");
      ce.add("not-processed","");
      ce.add("unknown","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CountItemType";
  ce = domain.createConstraintEnumeration();
      ce.add("absentee","");
      ce.add("absentee-fwab","");
      ce.add("absentee-in-person","");
      ce.add("absentee-mail","");
      ce.add("early","");
      ce.add("election-day","");
      ce.add("other","");
      ce.add("provisional","");
      ce.add("seats","");
      ce.add("total","");
      ce.add("uocava","");
      ce.add("write-in","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "DayType";
  ce = domain.createConstraintEnumeration();
      ce.add("all","");
      ce.add("friday","");
      ce.add("monday","");
      ce.add("saturday","");
      ce.add("sunday","");
      ce.add("thursday","");
      ce.add("tuesday","");
      ce.add("wednesday","");
      ce.add("weekday","");
      ce.add("weekend","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "DeviceType";
  ce = domain.createConstraintEnumeration();
      ce.add("bmd","");
      ce.add("dre","");
      ce.add("manual-count","");
      ce.add("opscan-central","");
      ce.add("opscan-precinct","");
      ce.add("other","");
      ce.add("unknown","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ElectionType";
  ce = domain.createConstraintEnumeration();
      ce.add("general","");
      ce.add("other","");
      ce.add("partisan-primary-closed","");
      ce.add("partisan-primary-open","");
      ce.add("primary","");
      ce.add("runoff","");
      ce.add("special","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "GeoSpatialFormat";
  ce = domain.createConstraintEnumeration();
      ce.add("geo-json","");
      ce.add("gml","");
      ce.add("kml","");
      ce.add("shp","");
      ce.add("wkt","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "IdentifierType";
  ce = domain.createConstraintEnumeration();
      ce.add("fips","");
      ce.add("local-level","");
      ce.add("national-level","");
      ce.add("ocd-id","");
      ce.add("other","");
      ce.add("state-level","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "OfficeTermType";
  ce = domain.createConstraintEnumeration();
      ce.add("full-term","");
      ce.add("unexpired-term","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ReportDetailLevel";
  ce = domain.createConstraintEnumeration();
      ce.add("precinct-level","");
      ce.add("summary-contest","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ReportingUnitType";
  ce = domain.createConstraintEnumeration();
      ce.add("ballot-batch","");
      ce.add("ballot-style-area","");
      ce.add("borough","");
      ce.add("city","");
      ce.add("city-council","");
      ce.add("combined-precinct","");
      ce.add("congressional","");
      ce.add("country","");
      ce.add("county","");
      ce.add("county-council","");
      ce.add("drop-box","");
      ce.add("judicial","");
      ce.add("municipality","");
      ce.add("other","");
      ce.add("polling-place","");
      ce.add("precinct","");
      ce.add("school","");
      ce.add("special","");
      ce.add("split-precinct","");
      ce.add("state","");
      ce.add("state-house","");
      ce.add("state-senate","");
      ce.add("town","");
      ce.add("township","");
      ce.add("utility","");
      ce.add("village","");
      ce.add("vote-center","");
      ce.add("ward","");
      ce.add("water","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ResultsStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("certified","");
      ce.add("correction","");
      ce.add("pre-election","");
      ce.add("recount","");
      ce.add("unofficial-complete","");
      ce.add("unofficial-partial","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "VoteVariation";
  ce = domain.createConstraintEnumeration();
      ce.add("approval","");
      ce.add("borda","");
      ce.add("cumulative","");
      ce.add("majority","");
      ce.add("n-of-m","");
      ce.add("other","");
      ce.add("plurality","");
      ce.add("proportional","");
      ce.add("range","");
      ce.add("rcv","");
      ce.add("super-majority","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
// create entities
entity = model.createEntity();
entity.setName("AnnotatedString");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Annotation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Content")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("AnnotatedUri");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Annotation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Content")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("BallotCounts");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("BallotsCast")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotsOutstanding")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotsRejected")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("BallotMeasureContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("ConStatement")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("EffectOfAbstain")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FullText")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("PassageThreshold")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("ProStatement")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SummaryText")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("BallotMeasureType");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("BallotMeasureSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Selection")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("BallotStyle");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("Candidate");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("BallotName")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("CampaignSlogan")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FileDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsIncumbent")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsTopTicket")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("PostElectionStatus")
    domains = design.getDomainSet();
  domain = domains.getByName("CandidatePostElectionStatus");
  attribute.setDomain(domain);
    attribute = entity.createAttribute();

attribute.setName("PreElectionStatus")
    domains = design.getDomainSet();
  domain = domains.getByName("CandidatePreElectionStatus");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("CandidateContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("NumberElected")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("NumberRunoff")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VotesAllowed")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("CandidateSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("IsWriteIn")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Coalition");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("ContactInformation");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Directions")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Contest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Abbreviation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotSubTitle")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotTitle")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("HasRotation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("OtherVoteVariation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SequenceOrder")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SubUnitsReported")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("TotalSubUnits")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VoteVariation")
    domains = design.getDomainSet();
  domain = domains.getByName("VoteVariation");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("ContestSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("SequenceOrder")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("CountStatus");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Status")
    domains = design.getDomainSet();
  domain = domains.getByName("CountItemStatus");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("CountItemType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Counts");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("IsSuppressedForPrivacy")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Round")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("CountItemType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("DeviceClass");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Manufacturer")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Model")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("DeviceType");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("Election");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("EndDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("StartDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("ElectionType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("ElectionAdministration");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("ElectionReport");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Format")
    domains = design.getDomainSet();
  domain = domains.getByName("ReportDetailLevel");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("GeneratedDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Timestamp");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("IsTest")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Issuer")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("IssuerAbbreviation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Notes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SequenceEnd")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("SequenceStart")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Status")
    domains = design.getDomainSet();
  domain = domains.getByName("ResultsStatus");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("TestType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VendorApplicationId")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("ExternalIdentifier");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("IdentifierType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Value")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("GpUnit");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Header");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Hours");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Day")
    domains = design.getDomainSet();
  domain = domains.getByName("DayType");
  attribute.setDomain(domain);
    attribute = entity.createAttribute();

attribute.setName("EndTime")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("StartTime")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("LatLng");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Latitude")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Longitude")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Source")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Office");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Description")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FilingDeadline")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsPartisan")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("OfficeGroup");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("OrderedContent");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
entity = model.createEntity();
entity.setName("OrderedContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("OrderedHeader");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("OtherCounts");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Overvotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Undervotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("WriteIns")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Party");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Abbreviation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Color")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsRecognizedParty")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Slogan")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("PartyContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("PartyRegistration");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Count")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("PartySelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("Person");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("DateOfBirth")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FirstName")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("FullName")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Gender")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("LastName")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Nickname")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Prefix")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Profession")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Suffix")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Title")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("ReportingDevice");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("SerialNumber")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("ReportingUnit");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("IsDistricted")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsMailOnly")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Number")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SubUnitsReported")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("TotalSubUnits")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("ReportingUnitType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("VotersParticipated")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VotersRegistered")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("RetentionContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("Schedule");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("EndDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsOnlyByAppointment")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsOrByAppointment")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("IsSubjectToChange")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("StartDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("SpatialDimension");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("SpatialExtent");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Coordinates")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Format")
    domains = design.getDomainSet();
  domain = domains.getByName("GeoSpatialFormat");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Term");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("EndDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("StartDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("OfficeTermType");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("VoteCounts");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Count")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("NUMERIC");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  // DO SECOND PASS OF ENTITIES
              source = model.getEntitySet().getByName("BallotCounts");
    target = model.getEntitySet().getByName("Counts");
  source.setHierarchicalParent(target);
        source = model.getEntitySet().getByName("BallotMeasureContest");
    target = model.getEntitySet().getByName("Contest");
  source.setHierarchicalParent(target);
    sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("BallotMeasureContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("InfoUri");
      relation.setName("BallotMeasureContest_InfoUri");
      relation.setProperty("fkRole", "BallotMeasureContest");
        source = model.getEntitySet().getByName("BallotMeasureSelection");
    target = model.getEntitySet().getByName("ContestSelection");
  source.setHierarchicalParent(target);
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("BallotMeasureSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("BallotMeasureSelection_ExternalIdentifier");
        sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("BallotStyle_ExternalIdentifier");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("BallotStyle_GpUnit");
    sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ImageUri");
      relation.setName("BallotStyle_ImageUri");
      relation.setProperty("fkRole", "BallotStyle");
    sourceName = "OrderedContent";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("BallotStyle_OrderedContent");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("BallotStyle");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("BallotStyle_Party");
        sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Candidate_ContactInformation");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Candidate_ExternalIdentifier");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Candidate_Party");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Candidate_Person");
        source = model.getEntitySet().getByName("CandidateContest");
    target = model.getEntitySet().getByName("Contest");
  source.setHierarchicalParent(target);
    sourceName = "Office";
 
    target = model.getEntitySet().getByName("CandidateContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("CandidateContest_Office");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("CandidateContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("PrimaryParty");
      relation.setName("CandidateContest_PrimaryParty");
      relation.setProperty("fkRole", "CandidateContest");
        source = model.getEntitySet().getByName("CandidateSelection");
    target = model.getEntitySet().getByName("ContestSelection");
  source.setHierarchicalParent(target);
    sourceName = "Candidate";
 
    target = model.getEntitySet().getByName("CandidateSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("CandidateSelection_Candidate");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("CandidateSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("EndorsementParty");
      relation.setName("CandidateSelection_EndorsementParty");
      relation.setProperty("fkRole", "CandidateSelection");
        source = model.getEntitySet().getByName("Coalition");
    target = model.getEntitySet().getByName("Party");
  source.setHierarchicalParent(target);
    sourceName = "Contest";
 
    target = model.getEntitySet().getByName("Coalition");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Coalition_Contest");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("Coalition");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Coalition_Party");
        entity = model.createEntity();
sourceName = "ContactInformationAddressLine";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("AddressLine")
// DETERMINE DATA TYPE
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
   
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ContactInformation_AddressLine");
      relation.setProperty("fkRole", "ContactInformation");
    sourceName = "AnnotatedString";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Email");
      relation.setName("ContactInformation_Email");
      relation.setProperty("fkRole", "ContactInformation");
    sourceName = "AnnotatedString";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Fax");
      relation.setName("ContactInformation_Fax");
      relation.setProperty("fkRole", "ContactInformation");
    sourceName = "LatLng";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ContactInformation_LatLng");
    sourceName = "AnnotatedString";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Phone");
      relation.setName("ContactInformation_Phone");
      relation.setProperty("fkRole", "ContactInformation");
    sourceName = "Schedule";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ContactInformation_Schedule");
    sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("ContactInformation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Uri");
      relation.setName("ContactInformation_Uri");
      relation.setProperty("fkRole", "ContactInformation");
        sourceName = "ContestSelection";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Contest_ContestSelection");
    sourceName = "CountStatus";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Contest_CountStatus");
    sourceName = "ReportingUnit";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ElectionDistrict");
      relation.setName("Contest_ElectionDistrict");
          relation.setProperty("fkRole", "ElectionDistrict");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Contest_ExternalIdentifier");
    sourceName = "OtherCounts";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Contest_OtherCounts");
        sourceName = "VoteCounts";
 
    target = model.getEntitySet().getByName("ContestSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ContestSelection_VoteCounts");
            sourceName = "DeviceClass";
 
    target = model.getEntitySet().getByName("Counts");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Counts_DeviceClass");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("Counts");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("Counts_GpUnit");
            sourceName = "BallotCounts";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_BallotCounts");
    sourceName = "BallotStyle";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_BallotStyle");
    sourceName = "Candidate";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_Candidate");
    sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_ContactInformation");
    sourceName = "Contest";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_Contest");
    sourceName = "CountStatus";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Election_CountStatus");
    sourceName = "ReportingUnit";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ElectionScope");
      relation.setName("Election_ElectionScope");
          relation.setProperty("fkRole", "ElectionScope");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Election_ExternalIdentifier");
        sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("ElectionAdministration");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionAdministration_ContactInformation");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("ElectionAdministration");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ElectionOfficialPerson");
      relation.setName("ElectionAdministration_ElectionOfficialPerson");
      relation.setProperty("fkRole", "ElectionAdministration");
        sourceName = "Election";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Election");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("ElectionReport_ExternalIdentifier");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_GpUnit");
    sourceName = "Header";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Header");
    sourceName = "Office";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Office");
    sourceName = "OfficeGroup";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_OfficeGroup");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Party");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("ElectionReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ElectionReport_Person");
            sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("GpUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ComposingGpUnit");
      relation.setName("GpUnit_ComposingGpUnit");
      relation.setProperty("fkRole", "GpUnit");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("GpUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("GpUnit_ExternalIdentifier");
        sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Header");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Header_ExternalIdentifier");
                sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Office_ContactInformation");
    sourceName = "ReportingUnit";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ElectionDistrict");
      relation.setName("Office_ElectionDistrict");
          relation.setProperty("fkRole", "ElectionDistrict");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Office_ExternalIdentifier");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("OfficeHolderPerson");
      relation.setName("Office_OfficeHolderPerson");
      relation.setProperty("fkRole", "Office");
    sourceName = "Term";
 
    target = model.getEntitySet().getByName("Office");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Office_Term");
        sourceName = "Office";
 
    target = model.getEntitySet().getByName("OfficeGroup");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("OfficeGroup_Office");
    sourceName = "OfficeGroup";
 
    target = model.getEntitySet().getByName("OfficeGroup");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
      relation.setNameOnTarget("SubOfficeGroup");
      relation.setName("OfficeGroup_SubOfficeGroup");
      relation.setProperty("fkRole", "OfficeGroup");
            source = model.getEntitySet().getByName("OrderedContest");
    target = model.getEntitySet().getByName("OrderedContent");
  source.setHierarchicalParent(target);
    sourceName = "Contest";
 
    target = model.getEntitySet().getByName("OrderedContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("OrderedContest_Contest");
    sourceName = "ContestSelection";
 
    target = model.getEntitySet().getByName("OrderedContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("OrderedContestSelection");
      relation.setName("OrderedContest_OrderedContestSelection");
      relation.setProperty("fkRole", "OrderedContest");
        source = model.getEntitySet().getByName("OrderedHeader");
    target = model.getEntitySet().getByName("OrderedContent");
  source.setHierarchicalParent(target);
    sourceName = "Header";
 
    target = model.getEntitySet().getByName("OrderedHeader");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("OrderedHeader_Header");
    sourceName = "OrderedContent";
 
    target = model.getEntitySet().getByName("OrderedHeader");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("OrderedHeader_OrderedContent");
        sourceName = "DeviceClass";
 
    target = model.getEntitySet().getByName("OtherCounts");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("OtherCounts_DeviceClass");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("OtherCounts");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("OtherCounts_GpUnit");
        sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Party_ContactInformation");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Party_ExternalIdentifier");
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("LeaderPerson");
      relation.setName("Party_LeaderPerson");
      relation.setProperty("fkRole", "Party");
    sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("LogoUri");
      relation.setName("Party_LogoUri");
      relation.setProperty("fkRole", "Party");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("PartyScopeGpUnit");
      relation.setName("Party_PartyScopeGpUnit");
      relation.setProperty("fkRole", "Party");
        source = model.getEntitySet().getByName("PartyContest");
    target = model.getEntitySet().getByName("Contest");
  source.setHierarchicalParent(target);
        sourceName = "Party";
 
    target = model.getEntitySet().getByName("PartyRegistration");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("PartyRegistration_Party");
        source = model.getEntitySet().getByName("PartySelection");
    target = model.getEntitySet().getByName("ContestSelection");
  source.setHierarchicalParent(target);
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("PartySelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("PartySelection_Party");
        sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("Person");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Person_ContactInformation");
    sourceName = "ExternalIdentifier";
 
    target = model.getEntitySet().getByName("Person");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Person_ExternalIdentifier");
    entity = model.createEntity();
sourceName = "PersonMiddleName";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("MiddleName")
// DETERMINE DATA TYPE
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
   
    target = model.getEntitySet().getByName("Person");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Person_MiddleName");
      relation.setProperty("fkRole", "Person");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("Person");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Person_Party");
        source = model.getEntitySet().getByName("ReportingDevice");
    target = model.getEntitySet().getByName("GpUnit");
  source.setHierarchicalParent(target);
    sourceName = "DeviceClass";
 
    target = model.getEntitySet().getByName("ReportingDevice");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("ReportingDevice_DeviceClass");
        source = model.getEntitySet().getByName("ReportingUnit");
    target = model.getEntitySet().getByName("GpUnit");
  source.setHierarchicalParent(target);
    sourceName = "Person";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("Authority");
      relation.setName("ReportingUnit_Authority");
      relation.setProperty("fkRole", "ReportingUnit");
    sourceName = "ContactInformation";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ReportingUnit_ContactInformation");
    sourceName = "CountStatus";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("ReportingUnit_CountStatus");
    sourceName = "ElectionAdministration";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ReportingUnit_ElectionAdministration");
    sourceName = "PartyRegistration";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ReportingUnit_PartyRegistration");
    sourceName = "SpatialDimension";
 
    target = model.getEntitySet().getByName("ReportingUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ReportingUnit_SpatialDimension");
        source = model.getEntitySet().getByName("RetentionContest");
    target = model.getEntitySet().getByName("BallotMeasureContest");
  source.setHierarchicalParent(target);
    sourceName = "Candidate";
 
    target = model.getEntitySet().getByName("RetentionContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("RetentionContest_Candidate");
    sourceName = "Office";
 
    target = model.getEntitySet().getByName("RetentionContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("RetentionContest_Office");
        sourceName = "Hours";
 
    target = model.getEntitySet().getByName("Schedule");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Schedule_Hours");
        sourceName = "AnnotatedUri";
 
    target = model.getEntitySet().getByName("SpatialDimension");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("MapUri");
      relation.setName("SpatialDimension_MapUri");
      relation.setProperty("fkRole", "SpatialDimension");
    sourceName = "SpatialExtent";
 
    target = model.getEntitySet().getByName("SpatialDimension");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("SpatialDimension_SpatialExtent");
                source = model.getEntitySet().getByName("VoteCounts");
    target = model.getEntitySet().getByName("Counts");
  source.setHierarchicalParent(target);]]>
		</script>
	</scr>
	<scr id="7B632CCB-BBA5-C893-2EA9-D5550FF7EC4F" name="Remove Leading Underscores from Cols" object="relational" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[tables = model.getTableSet().toArray();
for (var t = 0; t<tables.length;t++){
 table = tables[t]; 
 	tname = table.getName();
 	table.setName(tname.replace(/(_){2}/,'_'));
     columns = table.getElements();
     for (var i = 0; i < columns.length; i++) {
        column = columns[i];
        cname = column.getName();
        if(cname.startsWith("_")){
         column.setName(cname.replace(/^(_)*/,''));
        }
     } 
}]]>
		</script>
	</scr>
	<scr id="5322AC78-8C7A-29F5-A425-E456445DD4EC" name="CVR" object="logical" engine="Oracle Nashorn" type="" var="model" library="" method="" purpose="transformation" >
		<script>
			<![CDATA[design = model.getDesign();

// create enumerations
{
  domain = design.createDomain();
  domain.name = "AllocationStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("no","");
      ce.add("unknown","");
      ce.add("yes","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CVRStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("needs-adjudication","");
      ce.add("other","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CVRType";
  ce = domain.createConstraintEnumeration();
      ce.add("interpreted","");
      ce.add("modified","");
      ce.add("original","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "CastVoteRecordVersion";
  ce = domain.createConstraintEnumeration();
      ce.add("1.0.0","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ContestSelectionStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("generated-rules","");
      ce.add("invalidated-rules","");
      ce.add("needs-adjudication","");
      ce.add("other","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ContestStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("invalidated-rules","");
      ce.add("not-indicated","");
      ce.add("other","");
      ce.add("overvoted","");
      ce.add("undervoted","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "HashType";
  ce = domain.createConstraintEnumeration();
      ce.add("md6","");
      ce.add("other","");
      ce.add("sha-256","");
      ce.add("sha-512","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "IdentifierType";
  ce = domain.createConstraintEnumeration();
      ce.add("fips","");
      ce.add("local-level","");
      ce.add("national-level","");
      ce.add("ocd-id","");
      ce.add("other","");
      ce.add("state-level","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "IndicationStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("no","");
      ce.add("unknown","");
      ce.add("yes","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "PositionStatus";
  ce = domain.createConstraintEnumeration();
      ce.add("adjudicated","");
      ce.add("generated-rules","");
      ce.add("invalidated-rules","");
      ce.add("other","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ReportType";
  ce = domain.createConstraintEnumeration();
      ce.add("adjudicated","");
      ce.add("aggregated","");
      ce.add("originating-device-export","");
      ce.add("other","");
      ce.add("rcv-round","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "ReportingUnitType";
  ce = domain.createConstraintEnumeration();
      ce.add("combined-precinct","");
      ce.add("other","");
      ce.add("polling-place","");
      ce.add("precinct","");
      ce.add("split-precinct","");
      ce.add("vote-center","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
{
  domain = design.createDomain();
  domain.name = "VoteVariation";
  ce = domain.createConstraintEnumeration();
      ce.add("approval","");
      ce.add("borda","");
      ce.add("cumulative","");
      ce.add("majority","");
      ce.add("n-of-m","");
      ce.add("other","");
      ce.add("plurality","");
      ce.add("proportional","");
      ce.add("range","");
      ce.add("rcv","");
      ce.add("super-majority","");
  }
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
// create entities
entity = model.createEntity();
entity.setName("Annotation");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("TimeStamp")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Timestamp");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("BallotMeasureContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("BallotMeasureSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Selection")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("CVR");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("BallotAuditId")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotPrePrintedId")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotSheetId")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BallotStyleId")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BatchId")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("BatchSequenceId")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("UniqueId")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("CVRContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("OtherStatus")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Overvotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Selections")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Undervotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("WriteIns")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("CVRContestSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("OptionPosition")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherStatus")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Rank")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("TotalFractionalVotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("TotalNumberVotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("CVRSnapshot");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("OtherStatus")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("CVRType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("CVRWriteIn");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Text")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Candidate");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("CandidateContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("NumberElected")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VotesAllowed")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("CandidateSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("IsWriteIn")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("CastVoteRecordReport");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("GeneratedDate")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Timestamp");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Notes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherReportType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Version")
    domains = design.getDomainSet();
  domain = domains.getByName("CastVoteRecordVersion");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Code");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Label")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("IdentifierType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Value")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Contest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

entity.setCompleteSubtypes(true);
// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Abbreviation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherVoteVariation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("VoteVariation")
    domains = design.getDomainSet();
  domain = domains.getByName("VoteVariation");
  attribute.setDomain(domain);
    entity = model.createEntity();
entity.setName("ContestSelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("Election");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("File");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Data")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("BLOB");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("FileName")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("MimeType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("GpUnit");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("ReportingUnitType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Hash");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("OtherType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Type")
    domains = design.getDomainSet();
  domain = domains.getByName("HashType");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("Value")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  entity = model.createEntity();
entity.setName("Image");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("ImageData");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Location")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("Party");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Abbreviation")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Name")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("PartyContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("PartySelection");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("ReportingDevice");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("Application")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Manufacturer")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("MarkMetricType")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Model")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("SerialNumber")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    entity = model.createEntity();
entity.setName("RetentionContest");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
entity = model.createEntity();
entity.setName("SelectionPosition");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

// create attributes under entity
attribute = entity.createAttribute();

attribute.setName("FractionalVotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("HasIndication")
    domains = design.getDomainSet();
  domain = domains.getByName("IndicationStatus");
  attribute.setDomain(domain);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("IsAllocable")
    domains = design.getDomainSet();
  domain = domains.getByName("AllocationStatus");
  attribute.setDomain(domain);
    attribute = entity.createAttribute();

attribute.setName("IsGenerated")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Boolean");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("NumberVotes")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
      attribute.setNullsAllowed(false);
  attribute = entity.createAttribute();

attribute.setName("OtherStatus")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Position")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    attribute = entity.createAttribute();

attribute.setName("Rank")
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("Integer");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
    // DO SECOND PASS OF ENTITIES
      entity = model.createEntity();
sourceName = "AnnotationAdjudicatorName";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("AdjudicatorName")
// DETERMINE DATA TYPE
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
   
    target = model.getEntitySet().getByName("Annotation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Annotation_AdjudicatorName");
      relation.setProperty("fkRole", "Annotation");
    entity = model.createEntity();
sourceName = "AnnotationMessage";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("Message")
// DETERMINE DATA TYPE
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
   
    target = model.getEntitySet().getByName("Annotation");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Annotation_Message");
      relation.setProperty("fkRole", "Annotation");
        source = model.getEntitySet().getByName("BallotMeasureContest");
    target = model.getEntitySet().getByName("Contest");
  source.setHierarchicalParent(target);
        source = model.getEntitySet().getByName("BallotMeasureSelection");
    target = model.getEntitySet().getByName("ContestSelection");
  source.setHierarchicalParent(target);
        sourceName = "ImageData";
 
    target = model.getEntitySet().getByName("CVR");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("BallotImage");
      relation.setName("CVR_BallotImage");
      relation.setProperty("fkRole", "CVR");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("CVR");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("BallotStyleUnit");
      relation.setName("CVR_BallotStyleUnit");
          relation.setProperty("fkRole", "BallotStyleUnit");
    sourceName = "ReportingDevice";
 
    target = model.getEntitySet().getByName("CVR");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("CreatingDevice");
      relation.setName("CVR_CreatingDevice");
          relation.setProperty("fkRole", "CreatingDevice");
    sourceName = "CVRSnapshot";
 
    target = model.getEntitySet().getByName("CVR");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(false);
      relation.setNameOnTarget("");
      relation.setName("CVR_");
      relation.setProperty("fkRole", "CVR");
    sourceName = "Election";
 
    target = model.getEntitySet().getByName("CVR");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("CVR_Election");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("CVR");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("CVR_Party");
        sourceName = "Contest";
 
    target = model.getEntitySet().getByName("CVRContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("CVRContest_Contest");
    sourceName = "CVRContestSelection";
 
    target = model.getEntitySet().getByName("CVRContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("CVRContest_CVRContestSelection");
    entity = model.createEntity();
sourceName = "CVRContestStatus";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("Status")
// DETERMINE DATA TYPE
    domains = design.getDomainSet();
  domain = domains.getByName("ContestStatus");
  attribute.setDomain(domain);
   
    target = model.getEntitySet().getByName("CVRContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("CVRContest_Status");
      relation.setProperty("fkRole", "CVRContest");
        sourceName = "ContestSelection";
 
    target = model.getEntitySet().getByName("CVRContestSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("CVRContestSelection_ContestSelection");
    sourceName = "SelectionPosition";
 
    target = model.getEntitySet().getByName("CVRContestSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(false);
        relation.setName("CVRContestSelection_SelectionPosition");
    entity = model.createEntity();
sourceName = "CVRContestSelectionStatus";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("Status")
// DETERMINE DATA TYPE
    domains = design.getDomainSet();
  domain = domains.getByName("ContestSelectionStatus");
  attribute.setDomain(domain);
   
    target = model.getEntitySet().getByName("CVRContestSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("CVRContestSelection_Status");
      relation.setProperty("fkRole", "CVRContestSelection");
        sourceName = "Annotation";
 
    target = model.getEntitySet().getByName("CVRSnapshot");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("CVRSnapshot_Annotation");
    sourceName = "CVRContest";
 
    target = model.getEntitySet().getByName("CVRSnapshot");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("CVRSnapshot_CVRContest");
    entity = model.createEntity();
sourceName = "CVRSnapshotStatus";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("Status")
// DETERMINE DATA TYPE
    domains = design.getDomainSet();
  domain = domains.getByName("CVRStatus");
  attribute.setDomain(domain);
   
    target = model.getEntitySet().getByName("CVRSnapshot");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("CVRSnapshot_Status");
      relation.setProperty("fkRole", "CVRSnapshot");
        sourceName = "ImageData";
 
    target = model.getEntitySet().getByName("CVRWriteIn");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("WriteInImage");
      relation.setName("CVRWriteIn_WriteInImage");
          relation.setProperty("fkRole", "WriteInImage");
        sourceName = "Code";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Candidate_Code");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("Candidate");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Candidate_Party");
        source = model.getEntitySet().getByName("CandidateContest");
    target = model.getEntitySet().getByName("Contest");
  source.setHierarchicalParent(target);
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("CandidateContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("PrimaryParty");
      relation.setName("CandidateContest_PrimaryParty");
          relation.setProperty("fkRole", "PrimaryParty");
        source = model.getEntitySet().getByName("CandidateSelection");
    target = model.getEntitySet().getByName("ContestSelection");
  source.setHierarchicalParent(target);
    sourceName = "Candidate";
 
    target = model.getEntitySet().getByName("CandidateSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("CandidateSelection_Candidate");
        sourceName = "CVR";
 
    target = model.getEntitySet().getByName("CastVoteRecordReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("CastVoteRecordReport_CVR");
    sourceName = "Election";
 
    target = model.getEntitySet().getByName("CastVoteRecordReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(false);
        relation.setName("CastVoteRecordReport_Election");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("CastVoteRecordReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(false);
        relation.setName("CastVoteRecordReport_GpUnit");
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("CastVoteRecordReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("CastVoteRecordReport_Party");
    sourceName = "ReportingDevice";
 
    target = model.getEntitySet().getByName("CastVoteRecordReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ReportGeneratingDevice");
      relation.setName("CastVoteRecordReport_ReportGeneratingDevice");
      relation.setProperty("fkRole", "CastVoteRecordReport");
    entity = model.createEntity();
sourceName = "CastVoteRecordReportReportType";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("ReportType")
// DETERMINE DATA TYPE
    domains = design.getDomainSet();
  domain = domains.getByName("ReportType");
  attribute.setDomain(domain);
   
    target = model.getEntitySet().getByName("CastVoteRecordReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("CastVoteRecordReport_ReportType");
    sourceName = "ReportingDevice";
 
    target = model.getEntitySet().getByName("CastVoteRecordReport");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(false);
        relation.setName("CastVoteRecordReport_ReportingDevice");
            sourceName = "Code";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Contest_Code");
    sourceName = "ContestSelection";
 
    target = model.getEntitySet().getByName("Contest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(false);
        relation.setName("Contest_ContestSelection");
        sourceName = "Code";
 
    target = model.getEntitySet().getByName("ContestSelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("ContestSelection_Code");
        sourceName = "Candidate";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("Election_Candidate");
    sourceName = "Code";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Election_Code");
    sourceName = "Contest";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(false);
        relation.setName("Election_Contest");
    sourceName = "GpUnit";
 
    target = model.getEntitySet().getByName("Election");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
      relation.setNameOnTarget("ElectionScope");
      relation.setName("Election_ElectionScope");
          relation.setProperty("fkRole", "ElectionScope");
            sourceName = "Code";
 
    target = model.getEntitySet().getByName("GpUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("GpUnit_Code");
    sourceName = "ReportingDevice";
 
    target = model.getEntitySet().getByName("GpUnit");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("GpUnit_ReportingDevice");
            source = model.getEntitySet().getByName("Image");
    target = model.getEntitySet().getByName("File");
  source.setHierarchicalParent(target);
        sourceName = "Hash";
 
    target = model.getEntitySet().getByName("ImageData");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ImageData_Hash");
    sourceName = "Image";
 
    target = model.getEntitySet().getByName("ImageData");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ImageData_Image");
        sourceName = "Code";
 
    target = model.getEntitySet().getByName("Party");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("Party_Code");
        source = model.getEntitySet().getByName("PartyContest");
    target = model.getEntitySet().getByName("Contest");
  source.setHierarchicalParent(target);
        source = model.getEntitySet().getByName("PartySelection");
    target = model.getEntitySet().getByName("ContestSelection");
  source.setHierarchicalParent(target);
    sourceName = "Party";
 
    target = model.getEntitySet().getByName("PartySelection");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("*");
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(false);
          relation.setOptionalSource(true);
        relation.setName("PartySelection_Party");
        sourceName = "Code";
 
    target = model.getEntitySet().getByName("ReportingDevice");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("ReportingDevice_Code");
    entity = model.createEntity();
sourceName = "ReportingDeviceNotes";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("Notes")
// DETERMINE DATA TYPE
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
   
    target = model.getEntitySet().getByName("ReportingDevice");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("ReportingDevice_Notes");
      relation.setProperty("fkRole", "ReportingDevice");
        source = model.getEntitySet().getByName("RetentionContest");
    target = model.getEntitySet().getByName("BallotMeasureContest");
  source.setHierarchicalParent(target);
    sourceName = "Candidate";
 
    target = model.getEntitySet().getByName("RetentionContest");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("*");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("RetentionContest_Candidate");
        sourceName = "Code";
 
    target = model.getEntitySet().getByName("SelectionPosition");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(true);
        relation.setName("SelectionPosition_Code");
    sourceName = "CVRWriteIn";
 
    target = model.getEntitySet().getByName("SelectionPosition");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
 
    relation.setSourceCardinalityString("1");
  relation.setDominantRole(source);
      relation.setTargetCardinalityString("1");
    
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("SelectionPosition_CVRWriteIn");
    entity = model.createEntity();
sourceName = "SelectionPositionMarkMetricValue";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("MarkMetricValue")
// DETERMINE DATA TYPE
    // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
   
    target = model.getEntitySet().getByName("SelectionPosition");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("SelectionPosition_MarkMetricValue");
      relation.setProperty("fkRole", "SelectionPosition");
    entity = model.createEntity();
sourceName = "SelectionPositionStatus";
entity.setName(sourceName);
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

attribute = entity.createAttribute();
attribute.setName("Status")
// DETERMINE DATA TYPE
    domains = design.getDomainSet();
  domain = domains.getByName("PositionStatus");
  attribute.setDomain(domain);
   
    target = model.getEntitySet().getByName("SelectionPosition");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
  
      relation.setOptionalTarget(true);
          relation.setOptionalSource(false);
        relation.setName("SelectionPosition_Status");
      relation.setProperty("fkRole", "SelectionPosition");
  
]]>
		</script>
	</scr>

	<lib id="B310E434-78AE-6AED-EA94-6808B0262483" name="my first library" engine="Oracle Nashorn" methods="checkcomments,NotNullConstr_Name_Length" >
		<script>
			<![CDATA[// variable used to return custom message
var ruleMessage;
// variable used to return the type of the rule Error
// or Warning and red/blue color will be used for result
// if another custom type is returned (Problem in the rule below) 
// then result is colored in yellow
var errType;
var table;
function checkcomments(object){
 result = true;
 ruleMessage="";
 if(table.getCommentInRDBMS().equals("")){
  ruleMessage="no comments in RDBMS defined";
  errType="Problem:";
  result = false;
 }
 if(table.getComment().equals("")){
  if(ruleMessage.equals("")){
   ruleMessage="no comments defined";
  }else{
   ruleMessage= ruleMessage +" , no comments defined";
   }
   // can be changed to Warning    
   errType="Error";
  return false;
 }
 return result;
}
//rule for not null constraint name
function NotNullConstr_Name_Length(column){
 model = column.getDesignPart();
 name = column.getNotNullConstraintName();
 result = true;
 if(name!=null && !"".equals(name)){
	holder = model.getNamingOptionsHolderFor("oracle.dbtools.crest.model.design.constraint.TableLevelConstraint");
	if ((holder.getMaxNameLength() > 0) && (name.length() > holder.getMaxNameLength())) {
		result = false;
	}
 }
 return result
}]]>
		</script>
	</lib>
	<lib id="2518F33A-DE50-9E1D-7216-DD2A0FD6B84C" name="Jruby lib" engine="JSR 223 JRuby Engine" methods="tables_up" >
		<script>
			<![CDATA[def tables_up(model)
tables = model.getTableSet().toArray()
for t in 0..tables.length-1
 table = tables[t]
 name = table.getName().upcase
 table.setName(name)
 columns = table.getElements()
 size = table.getElementsCollection().size()-1
 for i in 0..size
	column = columns[i]
	cname = column.getName().upcase
	column.setName(cname)
 end
 keys = table.getKeys()
 for i in 0..keys.length-1
  key = keys[i]
  kname = key.getName().upcase
  key.setName(kname)
 end
end
return true
end]]>
		</script>
	</lib>


	<ddl_transformation_script_set id="B4E65BCB-CFF5-1302-E0BC-0C329BF9890E" name="Journal tables" description="" active="true">
			<script id="9836D087-881D-2161-19AF-2C6DF49A964A"/>
			<script id="1C0CDD35-A0D6-47E5-C702-7FB537C8A8C0"/>
			<script id="B50F3C56-0DC4-6376-8CF9-9CB189DC97DD"/>
			<script id="DC383793-5C2E-F62A-5241-35B8ACE86134"/>
	</ddl_transformation_script_set>
	<ddl_transformation_script_set id="86649BAE-547E-99D5-8B00-54B3BB9BB6BB" name="Empty script" description="" active="false">
			<script id="0DC38187-8245-8904-7E00-D4B6DF394899"/>
			<script id="27EEAD3F-3367-9D6F-8E02-D44189C855A1"/>
			<script id="83D0D285-DF95-0BE7-EF4F-AC3F2D9CDE94"/>
			<script id="6FDC20F3-D5B1-9711-C93F-745217AC8664"/>
	</ddl_transformation_script_set>
</dr_custom_scripts>